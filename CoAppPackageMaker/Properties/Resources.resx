<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LicenceType" xml:space="preserve">
    <value>License Type(string)</value>
  </data>
  <data name="License" xml:space="preserve">
    <value>Indicate file-path</value>
  </data>
  <data name="LicenseUrl" xml:space="preserve">
    <value>License Url</value>
  </data>
  <data name="MetadataAuthorVersion" xml:space="preserve">
    <value>a cosmetic string that contains the version the author has assigned to the product. (ie, this can be "1.0f" instead of in the four-digit-version "1.0.9.0".</value>
  </data>
  <data name="MetadataBugTracker" xml:space="preserve">
    <value>A URL pointing to the location of a given product's Bug Tracker.</value>
  </data>
  <data name="MetadataDescription" xml:space="preserve">
    <value>A full-text description of the software package.</value>
  </data>
  <data name="MetadataLicenses" xml:space="preserve">
    <value>One or more license-references that specify the license for the package.</value>
  </data>
  <data name="MetadataStability" xml:space="preserve">
    <value>An integer value ranging from -100 (very unstable) to 100 (very stable) to indicate to consumers the relative stability of the contents of the package.</value>
  </data>
  <data name="MetadataSummary" xml:space="preserve">
    <value>A short description of the package.</value>
  </data>
  <data name="PackageArchitecture" xml:space="preserve">
    <value>The binary architecture of the contents of the package. It is not permitted to have multiple binary architectures in the same package.</value>
  </data>
  <data name="PackageDisplayName" xml:space="preserve">
    <value>A cosmetic name for the product being packaged.</value>
  </data>
  <data name="PackageFeed" xml:space="preserve">
    <value>One or more URLs of feed locations that may be consulted when looking for a package upgrade.</value>
  </data>
  <data name="PackageLocation" xml:space="preserve">
    <value>One or more URLs that will return the package file. The URL must not be a referencing webpage, as this is the URL that the package manager will attempt to fetch the package from directly.</value>
  </data>
  <data name="PackageName" xml:space="preserve">
    <value>The full name of the package, without any version, platform or public key information.</value>
  </data>
  <data name="PackagePublisher" xml:space="preserve">
    <value>An identity-reference that contains the name, email and web address of the person or organization that created this package. This is not necessarily the author, of which should be listed in the metadata/contributors property.</value>
  </data>
  <data name="PackageVersion" xml:space="preserve">
    <value>The four-digit-version of the package. (ie, 1.2.3.4)</value>
  </data>
  <data name="TabLicense" xml:space="preserve">
    <value>Thsi rule contains information about License.</value>
  </data>
  <data name="TabMetadata" xml:space="preserve">
    <value>The metadata rule contains additional cosmetic data about the contents of the package.</value>
  </data>
  <data name="TabPackage" xml:space="preserve">
    <value>The package rule contains the manditory data for creating a package.</value>
  </data>
  <data name="CompatibilityPolicyMaximum" xml:space="preserve">
    <value>The maximum version this package is binary compatible with (inclusive).</value>
  </data>
  <data name="CompatibilityPolicyMinimum" xml:space="preserve">
    <value>The minimum version this package is binary compatible with (inclusive).</value>
  </data>
  <data name="CompatibilityPolicyVersions" xml:space="preserve">
    <value>The major.minor version numbers that this package replaces (this is used to create policy assemblies). If non are included, this is deduced from the feed locations available on the build computer.
</value>
  </data>
  <data name="TabCompatibilityPolicy" xml:space="preserve">
    <value>Describes the range of previous versions this package is binary compatible with.</value>
  </data>
  <data name="SigningCompany" xml:space="preserve">
    <value>string</value>
  </data>
  <data name="SigningDescription" xml:space="preserve">
    <value>string</value>
  </data>
  <data name="SigningFileVersionAttribute" xml:space="preserve">
    <value>four-digit-version</value>
  </data>
  <data name="SigningProductNameAttribute" xml:space="preserve">
    <value>string</value>
  </data>
  <data name="SigningProductVersion" xml:space="preserve">
    <value>four-digit-version</value>
  </data>
  <data name="SigningReplaceSignature" xml:space="preserve">
    <value>bool</value>
  </data>
  <data name="SingningInclude" xml:space="preserve">
    <value>files-reference</value>
  </data>
  <data name="TabSigning" xml:space="preserve">
    <value>This section is only required if all relavent files were not already signed beforehand.</value>
  </data>
  <data name="TabRequires" xml:space="preserve">
    <value>This rule is necessary if this package depends on other CoApp packages.</value>
  </data>
  <data name="TabDefine" xml:space="preserve">
    <value>This section initializes custom variables to be used elsewhere in the document.</value>
  </data>
  <data name="btnAddManifest" xml:space="preserve">
    <value>If your files need to link to multiple other assemblies, one manifest[] section will be required for each other assembly.</value>
  </data>
  <data name="TabManifest" xml:space="preserve">
    <value>If your package links to assemblies in another CoApp package, it may be necessary to embed a manifest into any files from this package which uses those other assemblies.</value>
  </data>
  <data name="TabPackageEvaluated" xml:space="preserve">
    <value>Package Rule  Value</value>
  </data>
  <data name="TabPackageSourceValue" xml:space="preserve">
    <value>Package Rule Source Value</value>
  </data>
  <data name="TabPackageSourseString" xml:space="preserve">
    <value>Package Rule  Source String</value>
  </data>
  <data name="TabFiles" xml:space="preserve">
    <value>This rule can be declared multiple times, each with a different reference_name. This is used to group similar files to be referenced by other rules. While not strictly necessary by itself, the use of it is highly encouraged to improve the readability of the .autopkg file.</value>
  </data>
  <data name="TabPackageComposition" xml:space="preserve">
    <value>This is a critical part of any application package, though it is generally omitted in assembly packages.</value>
  </data>
</root>